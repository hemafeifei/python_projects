# time
output$output_slider_time_out <- renderText({
paste0("Date: ", format(input$slider_time_out, format="%Y-%m-%d"))
})
# map
output$map_out <- renderLeaflet({
base_gz
})
observe({
data_out_circle <- filteredData_Out()[(format(filteredData_Out()$day,format="%Y-%m-%d")) ==format(input$slider_time_out, format="%Y-%m-%d"), ]
# subset(filteredData(), format(filteredData()$DT, format="%H:%M:%S")==format(input$slider_time, format="%H:%M:%S"))
leafletProxy("map_out", data =data_out_circle)%>%
clearMarkerClusters()%>%
clearMarkers()%>%
addCircleMarkers(data_out_circle$wgs_lng, data_out_circle$wgs_lat, color = pal(data_out_circle$line_id),fillOpacity = 0.5,stroke = FALSE, popup=paste(data_out_circle$line_id,data_out_circle$name, data_out_circle$destination,sep=","), radius=(data_out_circle$destination)/2400)
})
output$out_top5 <- renderPlotly({
if (nrow(stations_out_top5())==0)
return(NULL)
plot_ly(stations_out_top5(),
x=as.character(stations_out_top5()$name),
y = stations_out_top5()$destination,
type = "bar",
marker = list(color = pal(stations_out_top5()$line_id)) ) %>%
layout(showlegend=FALSE,
yaxis=yax,xaxis=xax)
})
observe({
proxy <- leafletProxy("map_out")
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend_out) {
proxy %>% addLegend(position = "bottomleft",pal=pal,values = metroLines$line_id.levels = c(1,2,3,30,4,5,6,7,8,60,68))
}
})
})
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="All"){
df_volume
}else{
df_volume %>% filter(line_id==as.numeric(input$select_line))
}
})
stations_in_top5 <- reactive({
filteredData()[(format(filteredData()$day,format="%Y-%m-%d")) ==format(input$slider_time, format="%Y-%m-%d"), ] %>%
# group_by(STATION) %>%
# summarise(count=sum(FEES),LINE=min(LINE)) %>%
arrange(desc(origin)) %>%
head(5) %>%
as.data.frame()
})
# stations_in_top5 <- reactive({
#   data_in_circle1 <- filteredData()[(format(filteredData()$DT,format="%H:%M:%S")) ==format(input$slider_time, format="%H:%M:%S"), ]%>%
#     #data_in_circle1<-df_origin%>%
#     group_by(STATION) %>%
#     summarise(count=sum(FEES),line=min(LINE)) %>%
#     arrange(desc(count)).head(5) %>%
#     as.data.frame()
# })
output$output_slider_time <- renderText({
paste0("Date: ", format(input$slider_time, format="%Y-%m-%d"))
})
# map
output$map <- renderLeaflet({
base_gz
})
observe({
data_in_circle <- filteredData()[(format(filteredData()$day,format="%Y-%m-%d")) ==format(input$slider_time, format="%Y-%m-%d"), ]
# subset(filteredData(), format(filteredData()$DT, format="%H:%M:%S")==format(input$slider_time, format="%H:%M:%S"))
leafletProxy("map", data =data_in_circle)%>%
clearMarkerClusters()%>%
clearMarkers()%>%
addCircleMarkers(data_in_circle$wgs_lng, data_in_circle$wgs_lat, color = pal(data_in_circle$line_id),fillOpacity = 0.5,stroke = FALSE, popup=paste(data_in_circle$line_id,data_in_circle$name, data_in_circle$origin,sep=","), radius=(data_in_circle$origin)/2400)
})
output$in_top5 <- renderPlotly({
if (nrow(stations_in_top5())==0)
return(NULL)
plot_ly(stations_in_top5(),
x=as.character(stations_in_top5()$name),
y = stations_in_top5()$origin,
type = "bar",
marker = list(color = pal(stations_in_top5()$line_id)) ) %>%
layout(showlegend=FALSE,
yaxis=yax,xaxis=xax)
})
observe({
proxy <- leafletProxy("map")
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
proxy %>% addLegend(position = "bottomleft",pal=pal,values = metroLines$line_id,levels = c(1,2,3,30,4,5,6,7,8,60,68))
}
})
filteredData_Out <- reactive({
if(input$select_line_out=="All"){
df_volume
}else{
df_volume %>% filter(line_id==as.numeric(input$select_line_out))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
stations_out_top5 <- reactive({
filteredData_Out()[(format(filteredData_Out()$day,format="%Y-%m-%d")) ==format(input$slider_time_out, format="%Y-%m-%d"), ] %>%
# group_by(STATION) %>%
# summarise(count=sum(FEES),LINE=min(LINE)) %>%
arrange(desc(destination)) %>%
head(5) %>%
as.data.frame()
})
# time
output$output_slider_time_out <- renderText({
paste0("Date: ", format(input$slider_time_out, format="%Y-%m-%d"))
})
# map
output$map_out <- renderLeaflet({
base_gz
})
observe({
data_out_circle <- filteredData_Out()[(format(filteredData_Out()$day,format="%Y-%m-%d")) ==format(input$slider_time_out, format="%Y-%m-%d"), ]
# subset(filteredData(), format(filteredData()$DT, format="%H:%M:%S")==format(input$slider_time, format="%H:%M:%S"))
leafletProxy("map_out", data =data_out_circle)%>%
clearMarkerClusters()%>%
clearMarkers()%>%
addCircleMarkers(data_out_circle$wgs_lng, data_out_circle$wgs_lat, color = pal(data_out_circle$line_id),fillOpacity = 0.5,stroke = FALSE, popup=paste(data_out_circle$line_id,data_out_circle$name, data_out_circle$destination,sep=","), radius=(data_out_circle$destination)/2400)
})
output$out_top5 <- renderPlotly({
if (nrow(stations_out_top5())==0)
return(NULL)
plot_ly(stations_out_top5(),
x=as.character(stations_out_top5()$name),
y = stations_out_top5()$destination,
type = "bar",
marker = list(color = pal(stations_out_top5()$line_id)) ) %>%
layout(showlegend=FALSE,
yaxis=yax,xaxis=xax)
})
observe({
proxy <- leafletProxy("map_out")
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend_out) {
proxy %>% addLegend(position = "bottomleft",pal=pal,values = metroLines$line_id,levels = c(1,2,3,30,4,5,6,7,8,60,68))
}
})
})
print(source('D:/R/gzmtr/gz_mtr_volume.R')$value)
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="All"){
df_volume
}else{
df_volume %>% filter(line_id==as.numeric(input$select_line))
}
})
stations_in_top5 <- reactive({
filteredData()[(format(filteredData()$day,format="%Y-%m-%d")) ==format(input$slider_time, format="%Y-%m-%d"), ] %>%
# group_by(STATION) %>%
# summarise(count=sum(FEES),LINE=min(LINE)) %>%
arrange(desc(origin)) %>%
head(5) %>%
as.data.frame()
})
# stations_in_top5 <- reactive({
#   data_in_circle1 <- filteredData()[(format(filteredData()$DT,format="%H:%M:%S")) ==format(input$slider_time, format="%H:%M:%S"), ]%>%
#     #data_in_circle1<-df_origin%>%
#     group_by(STATION) %>%
#     summarise(count=sum(FEES),line=min(LINE)) %>%
#     arrange(desc(count)).head(5) %>%
#     as.data.frame()
# })
output$output_slider_time <- renderText({
paste0("Date: ", format(input$slider_time, format="%Y-%m-%d"))
})
# map
output$map <- renderLeaflet({
base_gz
})
observe({
data_in_circle <- filteredData()[(format(filteredData()$day,format="%Y-%m-%d")) ==format(input$slider_time, format="%Y-%m-%d"), ]
# subset(filteredData(), format(filteredData()$DT, format="%H:%M:%S")==format(input$slider_time, format="%H:%M:%S"))
leafletProxy("map", data =data_in_circle)%>%
clearMarkerClusters()%>%
clearMarkers()%>%
addCircleMarkers(data_in_circle$wgs_lng, data_in_circle$wgs_lat, color = pal(data_in_circle$line_id),fillOpacity = 0.5,stroke = FALSE, popup=paste(data_in_circle$line_id,data_in_circle$name, data_in_circle$origin,sep=","), radius=(data_in_circle$origin)/2400)
})
output$in_top5 <- renderPlotly({
if (nrow(stations_in_top5())==0)
return(NULL)
plot_ly(stations_in_top5(),
x=as.character(stations_in_top5()$name),
y = stations_in_top5()$origin,
type = "bar",
marker = list(color = pal(stations_in_top5()$line_id)) ) %>%
layout(showlegend=FALSE,
yaxis=yax,xaxis=xax)
})
observe({
proxy <- leafletProxy("map")
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
proxy %>% addLegend(position = "bottomleft",pal=pal,values = metroLines$line_id)
}
})
filteredData_Out <- reactive({
if(input$select_line_out=="All"){
df_volume
}else{
df_volume %>% filter(line_id==as.numeric(input$select_line_out))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
stations_out_top5 <- reactive({
filteredData_Out()[(format(filteredData_Out()$day,format="%Y-%m-%d")) ==format(input$slider_time_out, format="%Y-%m-%d"), ] %>%
# group_by(STATION) %>%
# summarise(count=sum(FEES),LINE=min(LINE)) %>%
arrange(desc(destination)) %>%
head(5) %>%
as.data.frame()
})
# time
output$output_slider_time_out <- renderText({
paste0("Date: ", format(input$slider_time_out, format="%Y-%m-%d"))
})
# map
output$map_out <- renderLeaflet({
base_gz
})
observe({
data_out_circle <- filteredData_Out()[(format(filteredData_Out()$day,format="%Y-%m-%d")) ==format(input$slider_time_out, format="%Y-%m-%d"), ]
# subset(filteredData(), format(filteredData()$DT, format="%H:%M:%S")==format(input$slider_time, format="%H:%M:%S"))
leafletProxy("map_out", data =data_out_circle)%>%
clearMarkerClusters()%>%
clearMarkers()%>%
addCircleMarkers(data_out_circle$wgs_lng, data_out_circle$wgs_lat, color = pal(data_out_circle$line_id),fillOpacity = 0.5,stroke = FALSE, popup=paste(data_out_circle$line_id,data_out_circle$name, data_out_circle$destination,sep=","), radius=(data_out_circle$destination)/2400)
})
output$out_top5 <- renderPlotly({
if (nrow(stations_out_top5())==0)
return(NULL)
plot_ly(stations_out_top5(),
x=as.character(stations_out_top5()$name),
y = stations_out_top5()$destination,
type = "bar",
marker = list(color = pal(stations_out_top5()$line_id)) ) %>%
layout(showlegend=FALSE,
yaxis=yax,xaxis=xax)
})
observe({
proxy <- leafletProxy("map_out")
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend_out) {
proxy %>% addLegend(position = "bottomleft",pal=pal,values = metroLines$line_id)
}
})
})
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="All"){
df_volume
}else{
df_volume %>% filter(line_id==as.numeric(input$select_line))
}
})
stations_in_top5 <- reactive({
filteredData()[(format(filteredData()$day,format="%Y-%m-%d")) ==format(input$slider_time, format="%Y-%m-%d"), ] %>%
# group_by(STATION) %>%
# summarise(count=sum(FEES),LINE=min(LINE)) %>%
arrange(desc(origin)) %>%
head(5) %>%
as.data.frame()
})
# stations_in_top5 <- reactive({
#   data_in_circle1 <- filteredData()[(format(filteredData()$DT,format="%H:%M:%S")) ==format(input$slider_time, format="%H:%M:%S"), ]%>%
#     #data_in_circle1<-df_origin%>%
#     group_by(STATION) %>%
#     summarise(count=sum(FEES),line=min(LINE)) %>%
#     arrange(desc(count)).head(5) %>%
#     as.data.frame()
# })
output$output_slider_time <- renderText({
paste0("Date: ", format(input$slider_time, format="%Y-%m-%d"))
})
# map
output$map <- renderLeaflet({
base_gz
})
observe({
data_in_circle <- filteredData()[(format(filteredData()$day,format="%Y-%m-%d")) ==format(input$slider_time, format="%Y-%m-%d"), ]
# subset(filteredData(), format(filteredData()$DT, format="%H:%M:%S")==format(input$slider_time, format="%H:%M:%S"))
leafletProxy("map", data =data_in_circle)%>%
clearMarkerClusters()%>%
clearMarkers()%>%
addCircleMarkers(data_in_circle$wgs_lng, data_in_circle$wgs_lat, color = pal(data_in_circle$line_id),fillOpacity = 0.5,stroke = FALSE, popup=paste(data_in_circle$line_id,data_in_circle$name, data_in_circle$origin,sep=","), radius=(data_in_circle$origin)/2400)
})
output$in_top5 <- renderPlotly({
if (nrow(stations_in_top5())==0)
return(NULL)
plot_ly(stations_in_top5(),
x=as.character(stations_in_top5()$name),
y = stations_in_top5()$origin,
type = "bar",
marker = list(color = pal(stations_in_top5()$line_id)) ) %>%
layout(showlegend=FALSE,
yaxis=yax,xaxis=xax)
})
observe({
proxy <- leafletProxy("map")
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
proxy %>% addLegend(position = "bottomleft",pal=pal,values = metroLines$line_id)
}
})
filteredData_Out <- reactive({
if(input$select_line_out=="All"){
df_volume
}else{
df_volume %>% filter(line_id==as.numeric(input$select_line_out))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
stations_out_top5 <- reactive({
filteredData_Out()[(format(filteredData_Out()$day,format="%Y-%m-%d")) ==format(input$slider_time_out, format="%Y-%m-%d"), ] %>%
# group_by(STATION) %>%
# summarise(count=sum(FEES),LINE=min(LINE)) %>%
arrange(desc(destination)) %>%
head(5) %>%
as.data.frame()
})
# time
output$output_slider_time_out <- renderText({
paste0("Date: ", format(input$slider_time_out, format="%Y-%m-%d"))
})
# map
output$map_out <- renderLeaflet({
base_gz
})
observe({
data_out_circle <- filteredData_Out()[(format(filteredData_Out()$day,format="%Y-%m-%d")) ==format(input$slider_time_out, format="%Y-%m-%d"), ]
# subset(filteredData(), format(filteredData()$DT, format="%H:%M:%S")==format(input$slider_time, format="%H:%M:%S"))
leafletProxy("map_out", data =data_out_circle)%>%
clearMarkerClusters()%>%
clearMarkers()%>%
addCircleMarkers(data_out_circle$wgs_lng, data_out_circle$wgs_lat, color = pal(data_out_circle$line_id),fillOpacity = 0.5,stroke = FALSE, popup=paste(data_out_circle$line_id,data_out_circle$name, data_out_circle$destination,sep=","), radius=(data_out_circle$destination)/2400)
})
output$out_top5 <- renderPlotly({
if (nrow(stations_out_top5())==0)
return(NULL)
plot_ly(stations_out_top5(),
x=as.character(stations_out_top5()$name),
y = stations_out_top5()$destination,
type = "bar",
marker = list(color = pal(stations_out_top5()$line_id)) ) %>%
layout(showlegend=FALSE,
yaxis=yax,xaxis=xax)
})
observe({
proxy <- leafletProxy("map_out")
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend_out) {
proxy %>% addLegend(position = "bottomleft",pal=pal,values = metroLines$line_id,prefix = "line")
}
})
})
print(source('D:/R/gzmtr/gz_mtr_volume.R')$value)
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="All"){
df_volume
}else{
df_volume %>% filter(line_id==as.numeric(input$select_line))
}
})
stations_in_top5 <- reactive({
filteredData()[(format(filteredData()$day,format="%Y-%m-%d")) ==format(input$slider_time, format="%Y-%m-%d"), ] %>%
# group_by(STATION) %>%
# summarise(count=sum(FEES),LINE=min(LINE)) %>%
arrange(desc(origin)) %>%
head(5) %>%
as.data.frame()
})
# stations_in_top5 <- reactive({
#   data_in_circle1 <- filteredData()[(format(filteredData()$DT,format="%H:%M:%S")) ==format(input$slider_time, format="%H:%M:%S"), ]%>%
#     #data_in_circle1<-df_origin%>%
#     group_by(STATION) %>%
#     summarise(count=sum(FEES),line=min(LINE)) %>%
#     arrange(desc(count)).head(5) %>%
#     as.data.frame()
# })
output$output_slider_time <- renderText({
paste0("Date: ", format(input$slider_time, format="%Y-%m-%d"))
})
# map
output$map <- renderLeaflet({
base_gz
})
observe({
data_in_circle <- filteredData()[(format(filteredData()$day,format="%Y-%m-%d")) ==format(input$slider_time, format="%Y-%m-%d"), ]
# subset(filteredData(), format(filteredData()$DT, format="%H:%M:%S")==format(input$slider_time, format="%H:%M:%S"))
leafletProxy("map", data =data_in_circle)%>%
clearMarkerClusters()%>%
clearMarkers()%>%
addCircleMarkers(data_in_circle$wgs_lng, data_in_circle$wgs_lat, color = pal(data_in_circle$line_id),fillOpacity = 0.5,stroke = FALSE, popup=paste(data_in_circle$line_id,data_in_circle$name, data_in_circle$origin,sep=","), radius=(data_in_circle$origin)/2400)
})
output$in_top5 <- renderPlotly({
if (nrow(stations_in_top5())==0)
return(NULL)
plot_ly(stations_in_top5(),
x=as.character(stations_in_top5()$name),
y = stations_in_top5()$origin,
type = "bar",
marker = list(color = pal(stations_in_top5()$line_id)) ) %>%
layout(showlegend=FALSE,
yaxis=yax,xaxis=xax)
})
observe({
proxy <- leafletProxy("map")
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
proxy %>% addLegend(position = "bottomleft",pal=pal,values = metroLines$line_id,labFormat = labelFormat(prefix = "line"))
}
})
filteredData_Out <- reactive({
if(input$select_line_out=="All"){
df_volume
}else{
df_volume %>% filter(line_id==as.numeric(input$select_line_out))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
stations_out_top5 <- reactive({
filteredData_Out()[(format(filteredData_Out()$day,format="%Y-%m-%d")) ==format(input$slider_time_out, format="%Y-%m-%d"), ] %>%
# group_by(STATION) %>%
# summarise(count=sum(FEES),LINE=min(LINE)) %>%
arrange(desc(destination)) %>%
head(5) %>%
as.data.frame()
})
# time
output$output_slider_time_out <- renderText({
paste0("Date: ", format(input$slider_time_out, format="%Y-%m-%d"))
})
# map
output$map_out <- renderLeaflet({
base_gz
})
observe({
data_out_circle <- filteredData_Out()[(format(filteredData_Out()$day,format="%Y-%m-%d")) ==format(input$slider_time_out, format="%Y-%m-%d"), ]
# subset(filteredData(), format(filteredData()$DT, format="%H:%M:%S")==format(input$slider_time, format="%H:%M:%S"))
leafletProxy("map_out", data =data_out_circle)%>%
clearMarkerClusters()%>%
clearMarkers()%>%
addCircleMarkers(data_out_circle$wgs_lng, data_out_circle$wgs_lat, color = pal(data_out_circle$line_id),fillOpacity = 0.5,stroke = FALSE, popup=paste(data_out_circle$line_id,data_out_circle$name, data_out_circle$destination,sep=","), radius=(data_out_circle$destination)/2400)
})
output$out_top5 <- renderPlotly({
if (nrow(stations_out_top5())==0)
return(NULL)
plot_ly(stations_out_top5(),
x=as.character(stations_out_top5()$name),
y = stations_out_top5()$destination,
type = "bar",
marker = list(color = pal(stations_out_top5()$line_id)) ) %>%
layout(showlegend=FALSE,
yaxis=yax,xaxis=xax)
})
observe({
proxy <- leafletProxy("map_out")
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend_out) {
proxy %>% addLegend(position = "bottomleft",pal=pal,values = metroLines$line_id,labFormat = labelFormat(prefix = "line"))
}
})
})
print(source('D:/R/gzmtr/gz_mtr_volume.R')$value)
