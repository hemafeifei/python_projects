#max=as.POSIXct(max(shmetro_in$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
#value=as.POSIXct(min(shmetro_in$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
min = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
max = as.POSIXct(24*60*60, origin = "2015-04-01", tz = "GMT"),
value = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
step = 60*5,
timeFormat = "%T",
timezone = "GMT"),
selectInput("select_line", "Line",
c("All",lines_color$LINE)),
h4("TOP 5"),
plotlyOutput("in_top5",height = 200),
checkboxInput("legend", "Show legend", TRUE)
)
)
),
tabPanel("出站流量",
div(class="outer",
#tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
tags$style(type = "text/css", ".outer {position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0}"),
leafletOutput("map_out", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
h4(textOutput("output_slider_time_out")),
sliderInput("slider_time_out", "Time:",
#min=as.POSIXct(min(filter(shmetro_in, M5>30)$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
#max=as.POSIXct(max(shmetro_in$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
#value=as.POSIXct(min(shmetro_in$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
min = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
max = as.POSIXct(24*60*60, origin = "2015-04-01", tz = "GMT"),
value = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
step = 60*60,
timeFormat = "%h",
timezone = "GMT"),
selectInput("select_line_out", "Line",
c("All",lines_color$line)),
h4("TOP 5"),
plotlyOutput("out_top5",height = 200),
checkboxInput("legend_out", "Show legend", TRUE)
)
)
)
)
)
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="ALL"){
origin
}else{
origin %>% filter(LINE==as.numeric(input$select_line))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
})
# time
output$output_slider_time <- renderText({
paste0("Time: ", format(input$slider_time, "%H:%M:%S"))
})
# map
output$map <- renderLeaflet({
Shanghai %>%
addCircles(data=origin,lng= ~LON, lat = ~LAT, radius = ~FEES/10, color = ~pal(origin$LINE),
stroke = FALSE, weight =2) %>% clearMarkerClusters() %>% clearMarkers()
})
# output$in_top5 <- renderPlotly({
#   if (nrow(stations_in_top5())==0)
#     return(NULL)
#
#   plot_ly(stations_in_top5(),
#           x=stations_in_top5()$STATION,
#           y = stations_in_top5()$FEES,
#           type = "bar",
#           marker = list(color = pal(stations_in_top5()$LINE)),
#           bgcolor = "#00FFFFFF")
# })
}
)
ui <- shinyUI(navbarPage("SHMetro",
tabPanel("进站流量",
div(class="outer",
#tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
tags$style(type = "text/css", ".outer {position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
h4(textOutput("output_slider_time")),
sliderInput("slider_time", "Time:",
#min=as.POSIXct(min(filter(shmetro_in, M5>30)$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
#max=as.POSIXct(max(shmetro_in$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
#value=as.POSIXct(min(shmetro_in$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
min = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
max = as.POSIXct(24*60*60, origin = "2015-04-01", tz = "GMT"),
value = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
step = 60*5,
timeFormat = "%T",
timezone = "GMT"),
selectInput("select_line", "Line",
c("All",lines_color$LINE)),
h4("TOP 5"),
plotlyOutput("in_top5",height = 200),
checkboxInput("legend", "Show legend", TRUE)
)
)
),
tabPanel("出站流量",
div(class="outer",
#tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
tags$style(type = "text/css", ".outer {position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0}"),
leafletOutput("map_out", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
h4(textOutput("output_slider_time_out")),
sliderInput("slider_time_out", "Time:",
#min=as.POSIXct(min(filter(shmetro_in, M5>30)$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
#max=as.POSIXct(max(shmetro_in$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
#value=as.POSIXct(min(shmetro_in$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
min = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
max = as.POSIXct(24*60*60, origin = "2015-04-01", tz = "GMT"),
value = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
step = 60*60,
timeFormat = "%h",
timezone = "GMT"),
selectInput("select_line_out", "Line",
c("All",lines_color$line)),
h4("TOP 5"),
plotlyOutput("out_top5",height = 200),
checkboxInput("legend_out", "Show legend", TRUE)
)
)
)
)
)
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="ALL"){
origin
}else{
origin %>% filter(LINE==as.numeric(input$select_line))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
})
# time
output$output_slider_time <- renderText({
paste0("Time: ", format(input$slider_time, "%H:%M:%S"))
})
# map
output$map <- renderLeaflet({
Shanghai %>%
addCircles(data=origin,lng= ~LON, lat = ~LAT, radius = ~FEES/10, color = ~pal(origin$LINE),
stroke = FALSE, weight =2) %>% clearMarkerClusters() %>% clearMarkers()
})
# output$in_top5 <- renderPlotly({
#   if (nrow(stations_in_top5())==0)
#     return(NULL)
#
#   plot_ly(stations_in_top5(),
#           x=stations_in_top5()$STATION,
#           y = stations_in_top5()$FEES,
#           type = "bar",
#           marker = list(color = pal(stations_in_top5()$LINE)),
#           bgcolor = "#00FFFFFF")
# })
}
)
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="ALL"){
origin
}else{
origin %>% filter(LINE==as.numeric(input$select_line))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
# time
output$output_slider_time <- renderText({
paste0("Time: ", format(input$slider_time, "%H:%M:%S"))
})
# map
output$map <- renderLeaflet({
Shanghai %>%
addCircles(data=origin,lng= ~LON, lat = ~LAT, radius = ~FEES/10, color = ~pal(origin$LINE),
stroke = FALSE, weight =2) %>% clearMarkerClusters() %>% clearMarkers()
})
# output$in_top5 <- renderPlotly({
#   if (nrow(stations_in_top5())==0)
#     return(NULL)
#
#   plot_ly(stations_in_top5(),
#           x=stations_in_top5()$STATION,
#           y = stations_in_top5()$FEES,
#           type = "bar",
#           marker = list(color = pal(stations_in_top5()$LINE)),
#           bgcolor = "#00FFFFFF")
# })
}
)
shinyApp(ui = ui,server = server)
ui <- shinyUI(navbarPage("SHMetro",
tabPanel("进站流量",
div(class="outer",
#tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
tags$style(type = "text/css", ".outer {position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
h4(textOutput("output_slider_time")),
sliderInput("slider_time", "Time:",
#min=as.POSIXct(min(filter(shmetro_in, M5>30)$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
#max=as.POSIXct(max(shmetro_in$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
#value=as.POSIXct(min(shmetro_in$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
min = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
max = as.POSIXct(24*60*60, origin = "2015-04-01", tz = "GMT"),
value = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
step = 60*60,
timeFormat = "%h",
timezone = "GMT"),
selectInput("select_line", "Line",
c("All",lines_color$LINE)),
h4("TOP 5"),
plotlyOutput("in_top5",height = 200),
checkboxInput("legend", "Show legend", TRUE)
)
)
),
tabPanel("出站流量",
div(class="outer",
#tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
tags$style(type = "text/css", ".outer {position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0}"),
leafletOutput("map_out", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
h4(textOutput("output_slider_time_out")),
sliderInput("slider_time_out", "Time:",
#min=as.POSIXct(min(filter(shmetro_in, M5>30)$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
#max=as.POSIXct(max(shmetro_in$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
#value=as.POSIXct(min(shmetro_in$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
min = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
max = as.POSIXct(24*60*60, origin = "2015-04-01", tz = "GMT"),
value = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
step = 60*60,
timeFormat = "%h",
timezone = "GMT"),
selectInput("select_line_out", "Line",
c("All",lines_color$line)),
h4("TOP 5"),
plotlyOutput("out_top5",height = 200),
checkboxInput("legend_out", "Show legend", TRUE)
)
)
)
)
)
shinyApp(ui = ui,server = server)
ui <- shinyUI(navbarPage("SHMetro",
tabPanel("进站流量",
div(class="outer",
#tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
tags$style(type = "text/css", ".outer {position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
h4(textOutput("output_slider_time")),
sliderInput("slider_time", "Time:",
#min=as.POSIXct(min(filter(shmetro_in, M5>30)$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
#max=as.POSIXct(max(shmetro_in$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
#value=as.POSIXct(min(shmetro_in$M5)*5*60, origin = "2015-04-01", tz = "GMT"),
min = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
max = as.POSIXct(24*60*60, origin = "2015-04-01", tz = "GMT"),
value = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
step = 60*60,
timeFormat = "%h",
timezone = "GMT"),
selectInput("select_line", "Line",
c("All",lines_color$LINE)),
h4("TOP 5"),
plotlyOutput("in_top5",height = 200),
checkboxInput("legend", "Show legend", TRUE)
)
)
),
tabPanel("出站流量",
div(class="outer",
#tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
tags$style(type = "text/css", ".outer {position: fixed; top: 41px; left: 0; right: 0; bottom: 0; overflow: hidden; padding: 0}"),
leafletOutput("map_out", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
h4(textOutput("output_slider_time_out")),
sliderInput("slider_time_out", "Time:",
#min=as.POSIXct(min(filter(shmetro_in, M5>30)$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
#max=as.POSIXct(max(shmetro_in$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
#value=as.POSIXct(min(shmetro_in$M5)*5*60, origin = "1960-01-01", tz = "GMT"),
min = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
max = as.POSIXct(24*60*60, origin = "2015-04-01", tz = "GMT"),
value = as.POSIXct(5*60*60, origin = "2015-04-01", tz = "GMT"),
step = 60*60,
timeFormat = "%T",
timezone = "GMT"),
selectInput("select_line_out", "Line",
c("All",lines_color$line)),
h4("TOP 5"),
plotlyOutput("out_top5",height = 200),
checkboxInput("legend_out", "Show legend", TRUE)
)
)
)
)
)
shinyApp(ui = ui,server = server)
Shanghai
View(stations)
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="ALL"){
origin
}else{
origin %>% filter(LINE==as.numeric(input$select_line))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
# time
output$output_slider_time <- renderText({
paste0("Time: ", format(input$slider_time, "%H:%M:%S"))
})
# map
output$map <- renderLeaflet({
Shanghai %>%
addCircles(data=origin,lng= ~LON, lat = ~LAT, radius = 1, color = ~pal(origin$LINE), popup = paste(stations$STATION,stations$LINE)
stroke = FALSE, weight =2) %>% clearMarkerClusters() %>% clearMarkers()
})
# output$in_top5 <- renderPlotly({
#   if (nrow(stations_in_top5())==0)
#     return(NULL)
#
#   plot_ly(stations_in_top5(),
#           x=stations_in_top5()$STATION,
#           y = stations_in_top5()$FEES,
#           type = "bar",
#           marker = list(color = pal(stations_in_top5()$LINE)),
#           bgcolor = "#00FFFFFF")
# })
}
)
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="ALL"){
origin
}else{
origin %>% filter(LINE==as.numeric(input$select_line))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
# time
output$output_slider_time <- renderText({
paste0("Time: ", format(input$slider_time, "%H:%M:%S"))
})
# map
output$map <- renderLeaflet({
Shanghai %>%
addCircles(data=origin,lng= ~LON, lat = ~LAT, radius = 1, color = ~pal(origin$LINE), popup = paste(stations$STATION,stations$LINE)
stroke = FALSE, weight =2) %>% clearMarkerClusters() %>% clearMarkers()
})
# output$in_top5 <- renderPlotly({
#   if (nrow(stations_in_top5())==0)
#     return(NULL)
#
#   plot_ly(stations_in_top5(),
#           x=stations_in_top5()$STATION,
#           y = stations_in_top5()$FEES,
#           type = "bar",
#           marker = list(color = pal(stations_in_top5()$LINE)),
#           bgcolor = "#00FFFFFF")
# })
}
)
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="ALL"){
origin
}else{
origin %>% filter(LINE==as.numeric(input$select_line))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
# time
output$output_slider_time <- renderText({
paste0("Time: ", format(input$slider_time, "%H:%M:%S"))
})
# map
output$map <- renderLeaflet({
Shanghai %>%
addCircles(data=origin,lng= ~LON, lat = ~LAT, radius = 1, color = ~pal(origin$LINE), popup = paste(stations$STATION,stations$LINE)
stroke = FALSE, weight =2) %>% clearMarkerClusters() %>% clearMarkers()
})
# output$in_top5 <- renderPlotly({
#   if (nrow(stations_in_top5())==0)
#     return(NULL)
#
#   plot_ly(stations_in_top5(),
#           x=stations_in_top5()$STATION,
#           y = stations_in_top5()$FEES,
#           type = "bar",
#           marker = list(color = pal(stations_in_top5()$LINE)),
#           bgcolor = "#00FFFFFF")
# })
}
)
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="ALL"){
origin
}else{
origin %>% filter(LINE==as.numeric(input$select_line))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
# time
output$output_slider_time <- renderText({
paste0("Time: ", format(input$slider_time, "%H:%M:%S"))
})
# map
output$map <- renderLeaflet({
Shanghai %>%
addCircles(data=origin,lng= ~LON, lat = ~LAT, radius = 1, color = ~pal(origin$LINE), popup = paste(stations$STATION,stations$LINE)
stroke = FALSE, weight =2) %>% clearMarkerClusters() %>% clearMarkers()
})
# output$in_top5 <- renderPlotly({
#   if (nrow(stations_in_top5())==0)
#     return(NULL)
#
#   plot_ly(stations_in_top5(),
#           x=stations_in_top5()$STATION,
#           y = stations_in_top5()$FEES,
#           type = "bar",
#           marker = list(color = pal(stations_in_top5()$LINE)),
#           bgcolor = "#00FFFFFF")
# })
})
server <- shinyServer(function(input, output, session){
filteredData <- reactive({
if(input$select_line=="ALL"){
origin
}else{
origin %>% filter(LINE==as.numeric(input$select_line))
}
})
# stations_in_top5 <- reactive({
#   filteredData() %>%
#    origin[origin$LINE==??] %>%
#     arrange(desc(count)) %>%
#     head(5) %>%
#     as.data.frame()
# })
# time
output$output_slider_time <- renderText({
paste0("Time: ", format(input$slider_time, "%H:%M:%S"))
})
# map
output$map <- renderLeaflet({
Shanghai %>%
addCircles(data=origin,lng= ~LON, lat = ~LAT, radius = 1, color = ~pal(origin$LINE), popup = paste(stations$STATION,stations$LINE),
stroke = FALSE, weight =2) %>% clearMarkerClusters() %>% clearMarkers()})
# output$in_top5 <- renderPlotly({
#   if (nrow(stations_in_top5())==0)
#     return(NULL)
#
#   plot_ly(stations_in_top5(),
#           x=stations_in_top5()$STATION,
#           y = stations_in_top5()$FEES,
#           type = "bar",
#           marker = list(color = pal(stations_in_top5()$LINE)),
#           bgcolor = "#00FFFFFF")
# })
})
shinyApp(ui = ui,server = server)
shinyApp(ui = ui,server = server)
getwd()
setwd("D:/R/shinyAPP/")
